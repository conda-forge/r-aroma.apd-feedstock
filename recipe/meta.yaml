{% set version = "0.7.1" %}
{% set posix = 'm2-' if win else '' %}

package:
  name: r-aroma.apd
  version: {{ version|replace("-", "_") }}

source:
  url:
    - {{ cran_mirror }}/src/contrib/aroma.apd_{{ version }}.tar.gz
    - {{ cran_mirror }}/src/contrib/Archive/aroma.apd/aroma.apd_{{ version }}.tar.gz
  sha256: 3d2da19e9483e749c61c2a1eeac82f696c05fe6bef64e0cc924f8419cfd1d9b9

build:
  number: 1
  noarch: generic
  rpaths:
    - lib/R/lib/
    - lib/

requirements:
  build:
    - {{ posix }}zip               # [win]
    - cross-r-base {{ r_base }}    # [build_platform != target_platform]
  host:
    - r-base
    - r-r.huge >=0.9.0
    - r-r.methodss3 >=1.7.1
    - r-r.oo >=1.23.0
    - r-r.utils >=2.2.0
  run:
    - r-base
    - r-r.huge >=0.9.0
    - r-r.methodss3 >=1.7.1
    - r-r.oo >=1.23.0
    - r-r.utils >=2.2.0

test:
  commands:
    - $R -e "library('aroma.apd')"  # [not win]
    - "\"%R%\" -e \"library('aroma.apd')\""  # [win]

about:
  home: 'URL: http://www.aroma-project.org/, https://github.com/HenrikBengtsson/aroma.apd'
  license: LGPL-2.1-or-later
  summary: DEPRECATED. Do not start building new projects based on this package. (The (in-house) APD file format was initially developed to store Affymetrix probe-level data, e.g. normalized CEL intensities.  Chip types can be added to APD file and similar to methods in the affxparser package, this package provides methods
    to read APDs organized by units (probesets).  In addition, the probe elements can be arranged optimally such that the elements are guaranteed to be read in order when, for instance, data is read unit by unit.  This speeds up the read substantially.  This package is supporting the Aroma framework and should not be used
    elsewhere.)
  license_family: LGPL
  license_file:
    - {{ environ["PREFIX"] }}/lib/R/share/licenses/LGPL-2.1

extra:
  recipe-maintainers:
    - conda-forge/r
